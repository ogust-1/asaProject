/**
 */
package asa.provider;

import asa.util.AsaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AsaItemProviderAdapterFactory extends AsaAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.PortFournisConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortFournisConfigurationItemProvider portFournisConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link asa.PortFournisConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortFournisConfigurationAdapter() {
		if (portFournisConfigurationItemProvider == null) {
			portFournisConfigurationItemProvider = new PortFournisConfigurationItemProvider(this);
		}

		return portFournisConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.PortRequisConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortRequisConfigurationItemProvider portRequisConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link asa.PortRequisConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortRequisConfigurationAdapter() {
		if (portRequisConfigurationItemProvider == null) {
			portRequisConfigurationItemProvider = new PortRequisConfigurationItemProvider(this);
		}

		return portRequisConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.PortFournisComposant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortFournisComposantItemProvider portFournisComposantItemProvider;

	/**
	 * This creates an adapter for a {@link asa.PortFournisComposant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortFournisComposantAdapter() {
		if (portFournisComposantItemProvider == null) {
			portFournisComposantItemProvider = new PortFournisComposantItemProvider(this);
		}

		return portFournisComposantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.PortRequisComposant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortRequisComposantItemProvider portRequisComposantItemProvider;

	/**
	 * This creates an adapter for a {@link asa.PortRequisComposant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortRequisComposantAdapter() {
		if (portRequisComposantItemProvider == null) {
			portRequisComposantItemProvider = new PortRequisComposantItemProvider(this);
		}

		return portRequisComposantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.ServiceFournis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceFournisItemProvider serviceFournisItemProvider;

	/**
	 * This creates an adapter for a {@link asa.ServiceFournis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceFournisAdapter() {
		if (serviceFournisItemProvider == null) {
			serviceFournisItemProvider = new ServiceFournisItemProvider(this);
		}

		return serviceFournisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.ServiceRequis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceRequisItemProvider serviceRequisItemProvider;

	/**
	 * This creates an adapter for a {@link asa.ServiceRequis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceRequisAdapter() {
		if (serviceRequisItemProvider == null) {
			serviceRequisItemProvider = new ServiceRequisItemProvider(this);
		}

		return serviceRequisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.RoleFournis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleFournisItemProvider roleFournisItemProvider;

	/**
	 * This creates an adapter for a {@link asa.RoleFournis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleFournisAdapter() {
		if (roleFournisItemProvider == null) {
			roleFournisItemProvider = new RoleFournisItemProvider(this);
		}

		return roleFournisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.RoleRequis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleRequisItemProvider roleRequisItemProvider;

	/**
	 * This creates an adapter for a {@link asa.RoleRequis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleRequisAdapter() {
		if (roleRequisItemProvider == null) {
			roleRequisItemProvider = new RoleRequisItemProvider(this);
		}

		return roleRequisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.Glue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlueItemProvider glueItemProvider;

	/**
	 * This creates an adapter for a {@link asa.Glue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlueAdapter() {
		if (glueItemProvider == null) {
			glueItemProvider = new GlueItemProvider(this);
		}

		return glueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.Connecteur} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnecteurItemProvider connecteurItemProvider;

	/**
	 * This creates an adapter for a {@link asa.Connecteur}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnecteurAdapter() {
		if (connecteurItemProvider == null) {
			connecteurItemProvider = new ConnecteurItemProvider(this);
		}

		return connecteurItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.Composant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposantItemProvider composantItemProvider;

	/**
	 * This creates an adapter for a {@link asa.Composant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComposantAdapter() {
		if (composantItemProvider == null) {
			composantItemProvider = new ComposantItemProvider(this);
		}

		return composantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link asa.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link asa.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link asa.Properties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertiesItemProvider propertiesItemProvider;

	/**
	 * This creates an adapter for a {@link asa.Properties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertiesAdapter() {
		if (propertiesItemProvider == null) {
			propertiesItemProvider = new PropertiesItemProvider(this);
		}

		return propertiesItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (portFournisConfigurationItemProvider != null)
			portFournisConfigurationItemProvider.dispose();
		if (portRequisConfigurationItemProvider != null)
			portRequisConfigurationItemProvider.dispose();
		if (portFournisComposantItemProvider != null)
			portFournisComposantItemProvider.dispose();
		if (portRequisComposantItemProvider != null)
			portRequisComposantItemProvider.dispose();
		if (serviceFournisItemProvider != null)
			serviceFournisItemProvider.dispose();
		if (serviceRequisItemProvider != null)
			serviceRequisItemProvider.dispose();
		if (roleFournisItemProvider != null)
			roleFournisItemProvider.dispose();
		if (roleRequisItemProvider != null)
			roleRequisItemProvider.dispose();
		if (glueItemProvider != null)
			glueItemProvider.dispose();
		if (connecteurItemProvider != null)
			connecteurItemProvider.dispose();
		if (composantItemProvider != null)
			composantItemProvider.dispose();
		if (configurationItemProvider != null)
			configurationItemProvider.dispose();
		if (constraintItemProvider != null)
			constraintItemProvider.dispose();
		if (propertiesItemProvider != null)
			propertiesItemProvider.dispose();
	}

}
